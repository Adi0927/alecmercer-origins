
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
// General utils
proc cryUtilMirrorChangeOnSelectedCore( string $nodeAttribute )
{
	string $tokens[];
	$numTokens = `tokenize $nodeAttribute "." $tokens`;
	
	if( $numTokens == 2 )
	{
		$value = `getAttr $nodeAttribute`;
		
		string $selected[] = `ls -sl`;
		for( $node in $selected )
		{
			setAttr ($node+"."+$tokens[1]) $value;
		}
	}
}

global proc cryUtilMirrorChangeOnSelected( string $nodeAttribute )
{
	if( catchQuiet( `cryUtilMirrorChangeOnSelectedCore $nodeAttribute` ) )
	{
		warning "Failed to copy change to all selected nodes.";
	}
}

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
// Plugin loading and unloading
global proc string cryGetPluginName()
{
	string $version = `about -version`;

	string $pluginName = "MayaCryExport2";

	if( `gmatch $version "*2009*"` == 1 )
		$pluginName += "2009";
	else if( `gmatch $version "*2010*"` == 1 )
		$pluginName += "2010";
	else if( `gmatch $version "*2011*"` == 1 )
		$pluginName += "2011";
	else if( `gmatch $version "*2012*"` == 1 )
		$pluginName += "2012";

	if( `gmatch $version "*x64*"` == 1 )
		$pluginName += "_64";

	$pluginName += ".mll";

	return $pluginName;
}

global proc cryLoadPlugin()
{
	string $pluginName = `cryGetPluginName`;

	string $pluginPathString = `getenv MAYA_PLUG_IN_PATH`;
	string $pluginPathArray[];
	$pluginPathArray = stringToStringArray($pluginPathString, ";");

	int $pluginLoaded = 0;
	for( $pluginPath in $pluginPathArray )
	{
		string $fullPluginName = ( $pluginPath + "/" + $pluginName );
		if(	!catchQuiet( `loadPlugin -quiet $fullPluginName` ) )
		{
			$pluginLoaded = 1;
			pluginInfo -edit -autoload true $pluginName;
			loadPlugin -quiet $pluginName; // Load again to make sure the autoload take's effect.
			print( "Loaded Crytek plugin from `" + $fullPluginName + "`." );
			break;
		}
	}

	if( $pluginLoaded == 0 )
	{
		confirmDialog -title "Cry Export" -message ("Plugin `"+$pluginName+"` could not be found.") -button "OK";
	}
}

global proc cryUnloadPlugin()
{
	string $pluginName = `cryGetPluginName`;

	if( catchQuiet(	`pluginInfo -edit -autoload false $pluginName` ) )
	{
		confirmDialog -title "Cry Export" -message ("Plugin `"+$pluginName+"` could not be found.") -button "OK";
	}
	else
	{
		evalDeferred( "unloadPlugin " + $pluginName );
	}
}

global proc int cryPluginIsLoaded()
{
	string $pluginArray[];
	$pluginArray = `pluginInfo -query -listPlugins`;
	for( $pluginName in $pluginArray )
	{
		if( startsWith( $pluginName, "MayaCryExport" ) )
			return 1;
	}
	return 0;
}

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

proc int cryExportSceneHasValidName()
{
	string $sceneName;
	$sceneName = `file -q -sceneName`;
	if( size($sceneName) == 0 )
		return 0;

	return 1;
}

proc int cryExportGetExportNodeCount()
{
	string $exportNodes[];
	$exportNodes = `cryMayaSupportPlugin gatherExportNodes`;
	int $exportNodeCount = size($exportNodes);
	
	return $exportNodeCount;
}

global proc int cryExportCheckStatus()
{
	int $pluginLoaded = `cryPluginIsLoaded`;
	if( !$pluginLoaded )
		confirmDialog -title "Cry Export" -message "The MayaCryExport plugin is not loaded." -button "OK";

	int $validSceneName = `cryExportSceneHasValidName`;
	if( !$validSceneName )
		confirmDialog -title "Cry Export" -message "The current scene needs to be saved before you can export." -button "OK";	

	return $pluginLoaded && $validSceneName;
}

global proc string cryExportFixupPath( string $inPath )
{
	string $currentPath = `file -q -sceneName`;
	$currentPath2 = `fromNativePath $currentPath`;
	string $path = `fromNativePath $inPath`;
	$currentPath = `dirname $currentPath`;
	string $inFilename = `basename $path ""`;
	$path = `dirname $path`;

	string $currentPathTokens[];
	$currentNumTokens = `tokenize $currentPath "/" $currentPathTokens`;
	string $pathTokens[];
	$pathNumTokens = `tokenize $path "/" $pathTokens`;

	string $outPath = "";
	$minTokens = `min $currentNumTokens ($pathNumTokens-1)`;

	for( $i=0;$i<$minTokens;$i++ )
	{
		if( `strcmp $pathTokens[$i] $currentPathTokens[$i]` != 0 )
			break;
	}
	if( $i == 0 )
	{
		$outPath = $inPath;
	}
	else
	{
		for( $j=$i;$j<$currentNumTokens;$j++ )
			$outPath += "../";
		for( $j=$i;$j<$pathNumTokens;$j++ )
			$outPath += ($pathTokens[$j] + "/");
		$outPath += $inFilename;
	}

	return $outPath;
}

global proc string[] cryExportDecodeRangeString( string $animRange )
{
	string $decode[];

	string $tokens[];
	$numTokens = `tokenize $animRange "-" $tokens`;
	if( $numTokens == 5 )
	{
		string $animStart = `substitute "\\[" $tokens[0] ""`;
		string $animEnd = `substitute "] " $tokens[1] ""`;

		string $animName = `substituteAllString $tokens[2] " " ""`;
		string $animRoot = `substituteAllString $tokens[3] " " ""`;
		string $animPath = `substituteAllString $tokens[4] " " ""`;

		$decode[0] = $animStart;
		$decode[1] = $animEnd;
		$decode[2] = $animName;
		$decode[3] = $animRoot;
		$decode[4] = $animPath;
	}

	return $decode;
}

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

global int $g_cryExportSelectionChangedJob = -1;
global proc cryExportKillJobs()
{
	global int $g_cryExportSelectionChangedJob;
	if( $g_cryExportSelectionChangedJob != -1 )
	{
		scriptJob -force -kill $g_cryExportSelectionChangedJob;
		$g_cryExportSelectionChangedJob = -1;
	}
}

global proc cryExportCloseWindow()
{
	cryExportSaveSettings;
    deleteUI -window CRYEXPORT_WINDOW;
}

// No checking in here. This function should only be called after the validate has passed.
global proc cryExportExport()
{
	// The export name will be created from the Maya file name and the `cryexportnode` name
	string $options = "";
	$options += "cryExportType=geom" + ";";

	string $customFilePath = `textFieldButtonGrp -q -text CRYEXPORT_CUSTOMFILEPATH`;
	if( `gmatch $customFilePath "<*>"` == 0 )
		$options += "cryExportCustomFilePath=" + $customFilePath + ";";

	// Only export selected materials
	$options += "crySelectedMaterialsOnly=1;";
	
	if( `control -exists CRYEXPORT_REMOVENAMESPACES` )
	{
		int $removeNamespaces = `checkBox -q -value CRYEXPORT_REMOVENAMESPACES`;
		$options += "cryExportRemoveNamespaces=" + $removeNamespaces;
	}
	

	file -op $options -typ "MayaCryExport" -pr -ea "dummyExportName";
}

global proc cryExportValidateAndExport()
{
	if( `cryExportCheckStatus` )
	{
		cryExportExport;
	}
}

global proc cryExportGenerateMaterialFile()
{
	if( `cryExportCheckStatus` )
	{
		string $options = "";
		$options += "cryExportType=material" + ";";
		
		string $customFilePath = `textFieldButtonGrp -q -text CRYEXPORT_CUSTOMFILEPATH`;
		if( `gmatch $customFilePath "<*>"` == 0 )
			$options += "cryExportCustomFilePath=" + $customFilePath + ";";

		// Only export selected materials
		$options += "crySelectedMaterialsOnly=1;";

		if( catchQuiet( `file -op $options -typ "MayaCryExport" -pr -ea "dummyExportName"` ) )
		{
			confirmDialog -title "Cry Export" -message ("Failed to write material file.") -button "OK";
		}
	}
}

global proc cryExportExportAnim()
{
	int $i;

	if( `cryExportCheckStatus` )
	{
		string $animRanges[];
		$animRanges = `cryAnimGetRanges`;
		int $rangeCount = `cryAnimGetNumRanges`;

		int $selectedIndices[] = `textScrollList -q -selectIndexedItem CRYEXPORT_ANIMRANGES`;
		if( size($selectedIndices) == 0 )
		{
			for( $count = 0;$count<$rangeCount;$count++ )
				$selectedIndices[$count] = ($count+1);
		}

		for( $selectionIndex = 0;$selectionIndex < size($selectedIndices);$selectionIndex++ )
		{
			int $animIndex = $selectedIndices[$selectionIndex]-1;
			string $animRange = $animRanges[$animIndex];

			print( "Exporting anim range :: `" + $animRange + "`\n");

			string $decode[];
			$decode = `cryExportDecodeRangeString $animRange`;
			if( size($decode) == 5 )
			{
				string $animStart = $decode[0];
				string $animEnd = $decode[1];
				string $animName = $decode[2];
				string $animRoot = $decode[3];
				string $animPath = $decode[4];
				
				
				if( size($animRoot) == 0 || (`objExists $animRoot` == 1 && !`objectType -isType joint $animRoot`) )
				{
					confirmDialog -title "Cry Export" -message ("To export CGA and ANM geometry animations please use the export button in the geometry section of the export panel.") -button "OK";									
				}
				else
				{
					string $options = "";
					$options += "cryExportType=anim" + ";";
					$options += "cryExportCustomName=" + $animName + ";";
					$options += "cryExportCustomFilePath=" + $animPath + ";";

					$options += "cryExportAnimIndex=" + $animIndex +";";

					print( "Export Options : `"+$options+"`\n" );
					file -op $options -typ "MayaCryExport" -pr -ea "dummyExportName";
				}
			}
		}
	}
}

global proc cryExportEngineSettings()
{
	cryEngineSettingsPlugin();
}

global proc cryExportRebuildControls( )
{
	string $selectedNodes[];
	$selectedNodes = `ls -sl`;

	if( !`layout -exists CRYEXPORT_NODEOPTIONSFRAME` )
	{
		return;
	}

	setParent CRYEXPORT_NODEOPTIONSFRAME;

	// Delete all children
	string $childArray[];
	$childArray = `layout -q -childArray CRYEXPORT_NODEOPTIONSFRAME`;
	for( $child in $childArray )
	{
		deleteUI $child;
	}

	columnLayout -adjustableColumn true;
	{
		if( size($selectedNodes) > 0 )
		{
			string $node = $selectedNodes[0];
			string $lowerNode = tolower( $node );
			if( startsWith( $lowerNode, "cryexportnode_" ) )
			{
				if( `attributeExists "fileType" $node` )
				{
					string $nodeAttribute = ($node+".fileType");
					attrEnumOptionMenu -label "File Type" -attribute $nodeAttribute -changeCommand ("cryUtilMirrorChangeOnSelected "+$nodeAttribute);
				}
				if( `attributeExists "DoNotMerge" $node` )
				{
					string $control = `checkBox -label "Do Not Merge Nodes"`;
					string $nodeAttribute = ($node+".DoNotMerge");
					connectControl $control $nodeAttribute;
					checkBox -e -changeCommand ("cryUtilMirrorChangeOnSelected "+$nodeAttribute) $control;
				}
				if( `attributeExists "WriteVertexColours" $node` )
				{
					string $control = `checkBox -label "Write Vertex Colours"`;
					string $nodeAttribute = ($node+".WriteVertexColours");
					connectControl $control $nodeAttribute;
					checkBox -e -changeCommand ("cryUtilMirrorChangeOnSelected "+$nodeAttribute) $control;
				}
			}
		}
	}
	setParent ..;
}

proc cryExportAddEnumAttribute( string $node, string $plugName, string $inEnumList )
{
	// First, expand the enumList if it dosn't have `=` in it.   e.g. "one:two:tree" --> "one=0:two=1:three=2"
	string $enumList = $inEnumList;
	if( !`gmatch $inEnumList "*=*"` )
	{
		string $tempString = "";
		string $tokens[];
		$numTokens = `tokenize $inEnumList ":" $tokens`;
		for( $i = 0;$i<$numTokens;$i++ )
		{
			if( $i > 0 ) $tempString += ":";
			$tempString += ($tokens[$i] + "=" + $i);
		}
		$enumList = $tempString;
	}

	// Now add the enum
	int $exists = eval("attributeExists " + $plugName + " " + $node);
	string $currentString = "";

	// We need to delete the attribute if it already exists in case the options have changed
	if( $exists == true )
	{
	    $currentString = eval("getAttr -asString " + $node + "." + $plugName); 
	    eval("deleteAttr -at " + $plugName + " " + $node);
	}

	string $cmd = ("addAttr -dv 0 -ln " + $plugName + " -at enum -enumName \"");
	$cmd += $enumList;
	$cmd += "\" " + $node;
	eval( $cmd );

	// If it existed before, reselect the entry
	if( $exists == true )
	{
		string $enums = `addAttr -q -enumName ($node+"."+$plugName)`;
		string $tokens[];
		$numTokens = `tokenize $enums ":" $tokens`;
		for( $i = 0;$i<$numTokens;$i++ )
		{
			if( $tokens[$i] == $currentString )
			{
				eval("setAttr "  + $node + "." + $plugName + " " + $i);
				break;
			}
		}
	}
}

proc cryExportAddShaderAttributes()
{
	string $shaderNodes[];
	$shaderNodes = `ls -type lambert`;

	for( $shader in $shaderNodes )
	{
		// Add the physics enum
		cryExportAddEnumAttribute $shader "physicalise" "None=0:Default=1:ProxyNoDraw=2:NoCollide=3:Obstruct=4";
	}
}

global proc string cryExportGetFileTypeEnumString()
{
	return "Geometry (.CGF):Character (.CHR):Animated Geometry (.CGA)";
}

proc cryExportAddNodeAttributes()
{
	/////////////////////////////////////////
	// Add attributes to cryexportnodes
	string $nodes[];
	$nodes = `cryMayaSupportPlugin gatherExportNodes`;
	for( $node in $nodes )
	{
		// Add the export type combo.
		cryExportAddEnumAttribute $node "fileType" `cryExportGetFileTypeEnumString`;

		// Add the `Do not merge` option
		if( !`attributeExists "DoNotMerge" $node` )
			addAttr -dv 1 -ln DoNotMerge -at "bool" $node;
		// Add the `Write Vertex Colours` option
		if( !`attributeExists "WriteVertexColours" $node` )
			addAttr -dv 1 -ln WriteVertexColours -at "bool" $node;
	}

	/////////////////////////////////////////
	// Add attributes to joints
	$nodes = `ls "_joint*"`;
	for( $node in $nodes )
	{
		// NOTE:: Removed for now. Use the UDP window instead.

		// Add the limit attribute
		//if( !`attributeExists "limit" $node` )
		//	addAttr -dv 100 -ln limit -at "long" $node;
	}
	
	/////////////////////////////////////////
	// Add group attributes
	$nodes = `ls "*_group"`;
	for( $node in $nodes )
	{
		// NOTE:: Removed for now. Use the UDP window instead.

		// Add the Mass attribute
		//if( !`attributeExists "mass" $node` )
		//	addAttr -dv 10 -ln mass -at "long" $node;

		// Add the entity attribute
		//if( !`attributeExists "entity" $node` )
		//	addAttr -ln entity -at "bool" $node;
	}

	/////////////////////////////////////////
	// Add attribute to real joints
	$nodes = `ls -type joint`;
	for( $node in $nodes )
	{
		if( !`attributeExists "rotXLimited" $node` )
			addAttr -ln "rotXLimited" -at bool $node;
		if( !`attributeExists "rotYLimited" $node` )
			addAttr -ln "rotYLimited" -at bool $node;
		if( !`attributeExists "rotZLimited" $node` )
			addAttr -ln "rotZLimited" -at bool $node;

		if( !`attributeExists "rotLimitMin" $node` )
		{
			addAttr -ln "rotLimitMin" -at float3 $node;
			addAttr -ln "rotLimitMinX" -at "float" -p "rotLimitMin" $node;
			addAttr -ln "rotLimitMinY" -at "float" -p "rotLimitMin" $node;
			addAttr -ln "rotLimitMinZ" -at "float" -p "rotLimitMin" $node;
			setAttr -type float3 ($node+".rotLimitMin") 0 0 0;
		}
		if( !`attributeExists "rotLimitMax" $node` )
		{
			addAttr -ln "rotLimitMax" -at float3 $node;
			addAttr -ln "rotLimitMaxX" -at "float" -p "rotLimitMax" $node;
			addAttr -ln "rotLimitMaxY" -at "float" -p "rotLimitMax" $node;
			addAttr -ln "rotLimitMaxZ" -at "float" -p "rotLimitMax" $node;
			setAttr -type float3 ($node+".rotLimitMax") 0 0 0;
		}

		if( !`attributeExists "spring" $node` )
		{
			addAttr -ln "spring" -at float3 $node;
			addAttr -ln "springX" -at "float" -p "spring" $node;
			addAttr -ln "springY" -at "float" -p "spring" $node;
			addAttr -ln "springZ" -at "float" -p "spring" $node;
			setAttr -type float3 ($node+".spring") 0 0 0;
		}
		if( !`attributeExists "springTension" $node` )
		{
			addAttr -ln "springTension" -at float3 $node;
			addAttr -ln "springTensionX" -at "float" -p "springTension" $node;
			addAttr -ln "springTensionY" -at "float" -p "springTension" $node;
			addAttr -ln "springTensionZ" -at "float" -p "springTension" $node;
			setAttr -type float3 ($node+".springTension") 1 1 1;
		}
		if( !`attributeExists "damping" $node` )
		{
			addAttr -ln "damping" -at float3 $node;
			addAttr -ln "dampingX" -at "float" -p "damping" $node;
			addAttr -ln "dampingY" -at "float" -p "damping" $node;
			addAttr -ln "dampingZ" -at "float" -p "damping" $node;
			setAttr -type float3 ($node+".damping") 1 1 1;
		}
	}
}

global proc cryExportAddAttributes()
{
	cryExportAddShaderAttributes;
	cryExportAddNodeAttributes;
	
	cryExportRebuildControls;
}

global proc int cryExportEditCustomFilepath( string $folderPath, string $fileType )
{
	if( `size($folderPath)` == 0 )
		$folderPath = "<default>";
	else
		$folderPath = `cryExportFixupPath $folderPath`;
	textFieldButtonGrp -e -text $folderPath CRYEXPORT_CUSTOMFILEPATH;
    return 1;
}

global proc cryExportResetCustomString( string $controlName )
{
	textFieldButtonGrp -e -text "<default>" $controlName;
}

global proc cryExportShowInExplorer( string $folderName, string $fileName )
{
	int $fileExists = 0;
	
	if( size($fileName) > 0 )
	{
		int $fileID = 0;
		catchQuiet( $fileID = `fopen ($folderName+"/"+$fileName) "r"` );
		if( $fileID > 0 )
		{
			fclose $fileID;
			$fileExists = 1;
		}
	}
	
	if( $fileExists == 1 )
	{
		system( "explorer /select,\"" + toNativePath($folderName+"/"+$fileName) + "\"" );
	}
	else
	{
		system( "explorer \"" + toNativePath($folderName) + "\"" );
	}
}

global proc cryExportGeomShowInExplorer( )
{
	int $validSceneName = `cryExportSceneHasValidName`;
	if( !$validSceneName )
	{
		confirmDialog -title "Cry Export" -message "The scene needs to be saved first." -button "OK";
	}
	else
	{
		string $sceneFullName = `file -q -sceneName`;
		string $scenePath = `dirname $sceneFullName `;
		string $sceneName = `file -q -shortName -sceneName`;

		string $exportExt = ".dae.zip";
		string $ext = `fileExtension( $sceneName )`;
		string $base = `basename $sceneName ("."+$ext)`;
		string $fileName = ($base+$exportExt);

		string $folderName = $scenePath;
		string $customFilePath = `textFieldButtonGrp -q -text CRYEXPORT_CUSTOMFILEPATH`;
		if( `gmatch $customFilePath "<*>"` == 0 )
		{
			$folderName = $customFilePath;
		}
	
		cryExportShowInExplorer $folderName $fileName;
	}
}

global proc cryExportAnimIndexShowInExplorer( int $animIndex )
{
	int $rangeCount = `cryAnimGetNumRanges`;

	if( $animIndex < $rangeCount )
	{
		string $animRanges[];
		$animRanges = `cryAnimGetRanges`;
		string $animRange = $animRanges[$animIndex];

		string $decode[];
		$decode = `cryExportDecodeRangeString $animRange`;
		if( size($decode) == 5 )
		{
			string $animName = $decode[2];
			string $animPath = $decode[4];
			
			string $folderName = $animPath;
			if( size($animPath) > 2 && `gmatch $animPath "?:*"` == 0 )
			{
				string $sceneFullName = `file -q -sceneName`;
				string $scenePath = `dirname $sceneFullName `;
				
				$folderName = ($scenePath + "/" + $folderName);
			}
			
			string $exportExt = ".dae.zip";
			string $fileName = ($animName+$exportExt);
			
			cryExportShowInExplorer $folderName $fileName;
		}
	}
}

global proc cryExportAnimShowInExplorer()
{
	int $selected[] = `textScrollList -q -selectIndexedItem CRYEXPORT_ANIMRANGES`;
	if( size($selected) == 0 )
	{
		confirmDialog -title "Cry Export" -message "You need to have an anim selected first." -button "OK";
	}
	else
	{
		int $animIndex = $selected[0]-1;
		
		cryExportAnimIndexShowInExplorer $animIndex;
	}
}

global proc cryExportAnimRangesSelectionChanged()
{
	int $selected[] = `textScrollList -q -selectIndexedItem CRYEXPORT_ANIMRANGES`;
	if( size($selected) > 0 )
	{
		button -e -label "Export Selected Anims" CRYEXPORT_EXPORTANIMBUTTON;
	}
	else
	{
		button -e -label "Export All Anims" CRYEXPORT_EXPORTANIMBUTTON;
	}
}

proc createCryExportWindow()
{
	global int $g_cryExportSelectionChangedJob;
	if(!`window -ex CRYEXPORT_WINDOW`) 
	{
		if(`windowPref -exists CRYEXPORT_WINDOW`) 
		{
			windowPref -wh 250 500 -tlc `windowPref -q -topEdge CRYEXPORT_WINDOW` `windowPref -q -leftEdge CRYEXPORT_WINDOW` CRYEXPORT_WINDOW;
			//windowPref -remove CRYEXPORT_WINDOW;
		}
		window -titleBar true -title "Crytek Export" -widthHeight 250 500 -sizeable false -mnb false -mxb false CRYEXPORT_WINDOW;

		$layout1 = `formLayout -numberOfDivisions 100`;
		$collayout = `columnLayout -adjustableColumn true -rowSpacing 15`;
		button -label "Add Attributes" -command ("cryExportAddAttributes");
		
		{
			frameLayout -borderStyle "etchedOut" -marginHeight 5 -marginWidth 5 -label "Geometry Export" CRYEXPORT_GEOMEXPORTFRAME;
			columnLayout -adjustableColumn true;
			{
				textFieldButtonGrp -label "Export Path"  -buttonLabel ".." -cw3 70 50 15 -ct3 "right" "both" "both" -co3 2 2 0 -adj 2
					-buttonCommand "fileBrowserDialog -m 4 -fc \"cryExportEditCustomFilepath\" -ft \"\" -an \"\" -om \"Import\"" CRYEXPORT_CUSTOMFILEPATH;
				popupMenu;
				{
					menuItem -label "Reset" -c ("cryExportResetCustomString CRYEXPORT_CUSTOMFILEPATH");
				}
				button -label "Export All" -command ("cryExportValidateAndExport") CRYEXPORT_EXPORTGEOMBUTTON;
				button -label "Show in Explorer" -command ("cryExportGeomShowInExplorer");
			}
			setParent ..;
			setParent ..;
		}

		{
			frameLayout -borderStyle "etchedOut" -marginHeight 5 -marginWidth 5 -label "Material Export" CRYEXPORT_MATERIALFRAME;
			columnLayout -adjustableColumn true;
			{
				button -label "Generate Material Files" -command ("cryExportGenerateMaterialFile");
			}
			setParent ..;
			setParent ..;
		}

		{
			frameLayout -borderStyle "etchedOut" -marginHeight 5 -marginWidth 5 -label "Anim Export" CRYEXPORT_ANIMEXPORTFRAME;
			columnLayout -adjustableColumn true;
			{
				textScrollList -height 60 -selectCommand ("cryExportAnimRangesSelectionChanged") -allowMultiSelection true CRYEXPORT_ANIMRANGES;
				popupMenu;
				{
					menuItem -label "Clear Selection" -c ("textScrollList -e -deselectAll CRYEXPORT_ANIMRANGES; cryExportAnimRangesSelectionChanged;");
				}
				button -label "Export Selected Anims" -command ("cryExportExportAnim") CRYEXPORT_EXPORTANIMBUTTON;
				button -label "Show in Explorer" -command ("cryExportAnimShowInExplorer") CRYEXPORT_EXPORTANIMSHOWBUTTON;
				button -label "Anim Manager" -command ("cryAnimManagerWin") CRYEXPORT_EXPORTANIMMANAGERBUTTON;
			}
			setParent ..;
			setParent ..;
		}

		{
			frameLayout -borderStyle "etchedOut" -marginHeight 5 -marginWidth 5 -label "Export Options" CRYEXPORT_EXPORTOPTIONSFRAME;
			checkBox -value 1 -label "Remove Namespaces" CRYEXPORT_REMOVENAMESPACES;
			setParent ..;
		}

		{
			frameLayout -borderStyle "etchedOut" -marginHeight 5 -marginWidth 5 -label "Node Options" CRYEXPORT_NODEOPTIONSFRAME;
			cryExportRebuildControls;
			setParent ..;
		}

		button -label "CryEngine Settings" -command ("cryExportEngineSettings");

		setParent ..;
		$closebutton = `button -label "Close" -command ("cryExportCloseWindow")`;
		setParent ..;
	
		formLayout -edit
			-attachForm $collayout "top" 5
			-attachForm $collayout "left" 5
			-attachForm $collayout "right" 5
			-attachNone $collayout "bottom"
		    	    
			-attachForm $closebutton "bottom" 5 
			-attachForm $closebutton "left" 5
			-attachForm $closebutton "right" 5
			-attachNone $closebutton "top"
			$layout1;

		cryExportLoadSettings;
		cryExportUpdateExportLists;

		$g_cryExportSelectionChangedJob = `scriptJob -event "SelectionChanged" "cryExportRebuildControls"`;
		
		string $events[] = `scriptJob -listEvents`;
		
		if( `stringArrayContains "NewSceneOpened" $events` == 1 )
		{
			scriptJob -event "NewSceneOpened" "cryExportUpdateExportLists";
		}	
		if( `stringArrayContains "PostSceneRead" $events` == 1 )
		{
			scriptJob -event "PostSceneRead" "cryExportUpdateExportLists";
		}

		scriptJob -uiDeleted "CRYEXPORT_WINDOW" "cryExportKillJobs";
    }

	// Update the export button text
	cryExportAnimRangesSelectionChanged;
	showWindow CRYEXPORT_WINDOW;
}

global proc cryExportUpdateExportLists()
{
	cryAnimManagerUpgradeSettingsString;
	// Update the anim ranges
	if( `control -ex CRYEXPORT_ANIMRANGES` )
	{
		string $selected[] = `textScrollList -q -selectItem CRYEXPORT_ANIMRANGES`;
		textScrollList -e -removeAll CRYEXPORT_ANIMRANGES;
		int $numRanges = `cryAnimGetNumRanges`;
		string $animRanges[] = `cryAnimGetRangeNames`;
		for( $i = 0;$i<$numRanges;$i++ )
		{
			textScrollList -e -append $animRanges[$i] CRYEXPORT_ANIMRANGES;	
		}
		// Reselect
		for( $item in $selected )
		{
			catchQuiet( `textScrollList -e -selectItem $item CRYEXPORT_ANIMRANGES` );
		}
	}
}

/////////////////////////////////////////////////////////////////////////
// These Load and Save functions have far too many hard coded strings but
// they will have to stay for now.
// Settings string format is `<key>=<data>[;<key>=<data>]..`
// Keys with multiply values have those values comma seperated.
global proc string cryExportGetSettingNodeName()
{
	return "CRYEXPORTSETTINGS";
}

global proc cryExportLoadSettings()
{
	textFieldButtonGrp -e -text "<default>" CRYEXPORT_CUSTOMFILEPATH;

	string $exportSettingsNode = `cryExportGetSettingNodeName`;
	if( `objExists $exportSettingsNode` )
	{
		if( `attributeExists "ExportSettings" $exportSettingsNode` )
		{
			string $settingsString = `getAttr ($exportSettingsNode+".ExportSettings")`;
			string $settings[];
			$numSettings = `tokenize $settingsString ";" $settings`;

			for( $setting in $settings )
			{
				string $tokens[];
				$numTokens = `tokenize $setting "=," $tokens`;
				if( $numTokens >= 2 )
				{
					if( `strcmp $tokens[0] "customFilePath"` == 0 )
					{
						textFieldButtonGrp -e -text $tokens[1] CRYEXPORT_CUSTOMFILEPATH;
					}
					else if( `strcmp $tokens[0] "removeNamespaces"` == 0 )
					{
						int $value = $tokens[1];
						checkBox -e -value $value CRYEXPORT_REMOVENAMESPACES;
					}
				}
			}
		}
	}
}

global proc cryExportSaveSettings()
{
	string $exportSettingsNode = `cryExportGetSettingNodeName`;
	// Create the node if it dosen't exist
	if( !`objExists $exportSettingsNode` )
	{
		select -clear;
		string $settingsNode = `group -empty`;
		rename $settingsNode $exportSettingsNode;
	}

	if( `objExists $exportSettingsNode` )
	{
		if( !`attributeExists "ExportSettings" $exportSettingsNode` )
		{
			addAttr -ln "ExportSettings" -dt "string" $exportSettingsNode;
		}
	
		string $settings = "";

		{ // Custom file path
			string $customFilePath = `textFieldButtonGrp -q -text CRYEXPORT_CUSTOMFILEPATH`;
			if( `gmatch $customFilePath "<*>"` == 0 )
				$settings += "customFilePath=" + $customFilePath + ";";
		}

		{ // Remove name spaces
			int $removeNamespaces = `checkBox -q -value CRYEXPORT_REMOVENAMESPACES`;
			$settings += "removeNamespaces=" + $removeNamespaces + ";";
		}

		setAttr ($exportSettingsNode+".ExportSettings") -type "string" $settings;
		
	}
}
/////////////////////////////////////////////////////////////////////////

proc cryExportSourceDependencies()
{
    eval("source cryValidate.mel");
    eval("source cryAnim.mel");
}

global proc cryExportWin()
{
	cryExportSourceDependencies;
	createCryExportWindow();
}
